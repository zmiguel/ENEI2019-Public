{
  "version": 3,
  "file": "ngx-admin-lte.umd.min.js",
  "sources": [
    "ng://ngx-admin-lte/out/services/breadcrumb.service.ts",
    "ng://ngx-admin-lte/out/models/user.ts",
    "ng://ngx-admin-lte/out/services/user.service.ts",
    "ng://ngx-admin-lte/out/services/can-activate-guard.service.ts",
    "ng://ngx-admin-lte/out/services/translate.service.ts",
    "ng://ngx-admin-lte/out/services/logger.service.ts",
    "ng://ngx-admin-lte/out/services/messages.service.ts",
    "ng://ngx-admin-lte/out/services/notifications.service.ts",
    "ng://ngx-admin-lte/out/services/rest.service.ts",
    "ng://ngx-admin-lte/out/services/menu.service.ts",
    "ng://ngx-admin-lte/out/services/logo.service.ts",
    "ng://ngx-admin-lte/out/services/footer.service.ts",
    "ng://ngx-admin-lte/out/services/control-sidebar.service.ts",
    "ng://ngx-admin-lte/out/layouts/auth/auth.ts",
    "ng://ngx-admin-lte/out/layouts/login/login.component.ts",
    "ng://ngx-admin-lte/out/layouts/register/register.component.ts",
    "ng://ngx-admin-lte/out/models/message.ts",
    "ng://ngx-admin-lte/out/models/preference.ts",
    "ng://ngx-admin-lte/out/models/notification.ts",
    "ng://ngx-admin-lte/out/pipes/safe-html.pipes.ts",
    "ng://ngx-admin-lte/out/widgets/app-header/app-header.component.ts",
    "ng://ngx-admin-lte/out/widgets/logo/logo.component.ts",
    "ng://ngx-admin-lte/out/widgets/app-footer/app-footer.component.ts",
    "ng://ngx-admin-lte/out/widgets/menu-aside/menu-aside.component.ts",
    "ng://ngx-admin-lte/out/widgets/control-sidebar/control-sidebar.component.ts",
    "ng://ngx-admin-lte/out/widgets/messages-box/messages-box.component.ts",
    "ng://ngx-admin-lte/out/widgets/notification-box/notification-box.component.ts",
    "ng://ngx-admin-lte/out/widgets/tasks-box/tasks-box.component.ts",
    "ng://ngx-admin-lte/out/widgets/user-box/user-box.component.ts",
    "ng://ngx-admin-lte/out/widgets/breadcrumb/breadcrumb.component.ts",
    "ng://ngx-admin-lte/out/widgets/component-loader/component-loader.component.ts",
    "ng://ngx-admin-lte/out/ngx-admin-lte.module.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from '@angular/core';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\n\n@Injectable()\nexport class BreadcrumbService {\n  public current: ReplaySubject<any>;\n  private initialData: any = {\n    description: '',\n    display: false,\n    header : '',\n\n    levels: [\n      {\n        icon: 'clock-o',\n        link: ['/'],\n        title: 'Default'\n      }\n    ]\n  };\n\n  constructor() {\n    this.current = new ReplaySubject(1);\n    this.clear();\n  }\n\n  public setCurrent(data: any) {\n    this.current.next(data);\n  }\n\n  public getCurrent() {\n    return this.current;\n  }\n\n  public clear() {\n    this.setCurrent(this.initialData);\n  }\n\n}\n",
    "export class User {\n    public firstname: string;\n    public lastname: string;\n    public email: string;\n    public avatarUrl: string;\n    public creationDate: string;\n    public preferredLang: string;\n    public connected = false;\n\n    public constructor( data: any = {}) {\n        this.firstname = data.firstname || '';\n        this.lastname = data.lastname || '';\n        this.email = data.email || '';\n        this.avatarUrl = data.avatarUrl || '';\n        this.creationDate = data.creation_date || Date.now();\n        this.preferredLang = data.preferredLang || null;\n        this.connected = data.connected || false;\n    }\n\n    public getName() {\n        return this.firstname + ' ' + this.lastname;\n    }\n}\n",
    "import { User } from '../models/user';\nimport { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs/Rx';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class UserService {\n    private current: ReplaySubject<User> = new ReplaySubject<User>( 1 );\n\n    // Called when logout\n    public logoutAction: Function;\n\n    constructor(\n      private router: Router\n    ) {}\n\n    public setCurrent( user: User ) {\n      this.current.next( user );\n    }\n\n    public getCurrent() {\n      return this.current;\n    }\n\n    public logout() {\n      if ( this.logoutAction ) {\n        this.logoutAction();\n      } else {\n        const user = new User();\n        user.connected = false;\n        this.setCurrent( user );\n        this.router.navigate(['login']);\n      }\n    }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { UserService } from './user.service';\n\n@Injectable()\nexport class CanActivateGuard implements CanActivate {\n  private connected = false;\n\n  constructor(\n    private router: Router,\n    private userService: UserService\n  ) {\n    this.userService.getCurrent().subscribe((user) => {\n      this.connected = user.connected;\n    });\n  }\n\n  public canActivate() {\n    // test here if you user is logged\n    if ( !this.connected ) {\n      this.router.navigate( [ 'login' ] );\n    }\n    return this.connected;\n  }\n}\n",
    "import { Injectable, OnInit } from '@angular/core';\nimport { TranslateService as NGXTranslateService } from '@ngx-translate/core';\nimport { UserService } from './user.service';\nimport { User } from '../models/user';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { HttpClient } from '@angular/common/http';\n\nconst langs = ['en', 'fr', 'ru', 'he', 'zh', 'pt', 'it'];\nconst langmatch = /en|fr|ru|he|zh|pt|it/;\n\n@Injectable()\nexport class TranslateService implements OnInit {\n    private lang = 'us';\n    private currentUser: User;\n\n    constructor( private userServ: UserService, private translate: NGXTranslateService ) {\n        translate.addLangs( langs );\n        // this language will be used as a fallback when a translation isn't found in the current language\n        translate.setDefaultLang( 'en' );\n\n        this.userServ.getCurrent().subscribe(( user: User ) => {\n            this.currentUser = user;\n\n            // the lang to use, if the lang isn't available, it will use the current loader to get them\n            const browserLang = this.translate.getBrowserLang();\n            const browserCultureLang = this.translate.getBrowserCultureLang();\n            console.log( 'Detected browser language: \"' + browserCultureLang + '\"' );\n\n            // check if current User has a Preferred Language set, and it differs from his browser lang\n            let useLang = 'en';\n            const prefLang = ( this.currentUser ) ? this.currentUser.preferredLang : null;\n            if ( !prefLang ) {\n                useLang = browserLang.match( langmatch ) ? browserLang : 'en';\n            } else {\n                console.log( 'Detected User preferred language: \"' + prefLang + '\"' );\n                useLang = prefLang.match( langmatch ) ? prefLang : 'en';\n            }\n            this.translate.use( useLang );\n            console.log( 'Translation language has been set to: \"' + useLang + '\"' );\n            // translate.use( 'ru' );\n        });\n    }\n\n    public ngOnInit() {\n        // TODO\n    }\n\n    public getTranslate(): NGXTranslateService {\n        return this.translate;\n    }\n\n}\n",
    "import { Injectable, Input } from '@angular/core';\nimport { UserService } from './user.service';\nimport { TranslateService } from './translate.service';\n\n@Injectable()\nexport class LoggerService {\n\n    constructor( private translate: TranslateService ) {}\n\n    public log( component: string, msg?: string, i18nRef?: string, data?: string[] ) {\n        // here we should test some environment config to show or not the log\n        if ( true ) {\n            if ( i18nRef ) {\n                let params: {} = {};\n                if ( data ) {\n                    params = ( data[0] ) ? { 0: data[0] } : params;\n                    params = ( data[1] ) ? { 0: data[0], 1: data[1] } : params;\n                    params = ( data[2] ) ? { 0: data[0], 1: data[1], 2: data[2] } : params;\n                }\n                this.translate.getTranslate().get( i18nRef, params ).subscribe(( res: string ) => {\n                    console.log( component + ': ' + res );\n                });\n            } else {\n                console.log( component + ': ' + msg );\n            }\n        }\n    }\n}\n",
    "// based on https://github.com/ng-book/angular2-rxjs-chat/blob/master/app/ts/services/MessagesService.ts\nimport { User } from '../models/user';\nimport { Message } from '../models/message';\nimport { Injectable } from '@angular/core';\nimport { Observable, Subject, ReplaySubject } from 'rxjs/Rx';\n\nconst initialMessages: Message[] = [];\n\ntype IMessagesOperation = (messages: Message[]) => Message[];\n\n@Injectable()\nexport class MessagesService {\n  private messagesList: Message[] = [];\n  // a stream that publishes new messages only once\n  public newMessages: Subject<Message> = new Subject<Message>();\n\n  // `messages` is a stream that emits an array of the most up to date messages\n  public messages: ReplaySubject<Message[]> = new ReplaySubject<Message[]>(1);\n\n  // `updates` receives _operations_ to be applied to our `messages`\n  // it's a way we can perform changes on *all* messages (that are currently\n  // stored in `messages`)\n  public updates: Subject<any> = new Subject<any>();\n\n  // action streams\n  public create: Subject<Message> = new Subject<Message>();\n  // public markThreadAsRead: Subject<any> = new Subject<any>();\n\n  constructor() {\n    // recois des operation, et les fais sur la liste interne, puis diffuse le resultat sur messages\n    this.updates.subscribe((ope) => {\n      this.messagesList = ope(this.messagesList);\n      console.log(this.messagesList);\n      this.messages.next(this.messagesList);\n    });\n\n    this.newMessages\n      .map(function(message: Message): IMessagesOperation {\n        return (messages: Message[]) => {\n          return messages.concat(message);\n        };\n      })\n      .subscribe(this.updates);\n\n  }\n\n  // an imperative function call to this action stream\n  public addMessage(message: Message): void {\n    this.newMessages.next(message);\n  }\n\n}\n",
    "\n// based on https://github.com/ng-book/angular2-rxjs-chat/blob/master/app/ts/services/NotificationsService.ts\nimport { Notification } from '../models/notification';\nimport { Injectable } from '@angular/core';\nimport { Observable, Subject, ReplaySubject } from 'rxjs/Rx';\n\nconst initialNotifications: Notification[] = [];\n\ntype INotificationsOperation = (notifications: Notification[]) => Notification[];\n\n@Injectable()\nexport class NotificationsService {\n  private notificationsList: Notification[] = [];\n  // a stream that publishes new notifications only once\n  public newNotifications: Subject<Notification> = new Subject<Notification>();\n\n  // `notifications` is a stream that emits an array of the most up to date notifications\n  public notifications: ReplaySubject<Notification[]> = new ReplaySubject<Notification[]>(1);\n\n  // `updates` receives _operations_ to be applied to our `notifications`\n  // it's a way we can perform changes on *all* notifications (that are currently\n  // stored in `notifications`)\n  public updates: Subject<any> = new Subject<any>();\n\n  // action streams\n  public create: Subject<Notification> = new Subject<Notification>();\n  // public markThreadAsRead: Subject<any> = new Subject<any>();\n\n  constructor() {\n    // recois des operation, et les fais sur la liste interne, puis diffuse le resultat sur notifications\n    this.updates.subscribe((ope) => {\n      this.notificationsList = ope(this.notificationsList);\n      console.log(this.notificationsList);\n      this.notifications.next(this.notificationsList);\n    });\n\n    this.newNotifications\n      .map(function(notification: Notification): INotificationsOperation {\n        return (notifications: Notification[]) => {\n          return notifications.concat(notification);\n        };\n      })\n      .subscribe(this.updates);\n\n  }\n\n  // an imperative function call to this action stream\n  public addNotification(notification: Notification): void {\n    this.newNotifications.next(notification);\n  }\n\n}\n",
    "import { Injectable } from '@angular/core';\nimport { Http, Response, Headers } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class RestService {\n    public modelName: string;\n    public headers: Headers;\n    private serverWithApiUrl: string;\n\n    // cache data\n    public lastGetAll: Array<any>;\n    public lastGet: any;\n\n    constructor(private http: Http) {\n        this.modelName = 'to-configure';\n\n        this.headers = new Headers();\n        this.headers.append('Content-Type', 'application/json');\n        this.headers.append('Accept', 'application/json');\n    }\n\n    public setApiUrl( url: string) {\n      this.serverWithApiUrl = url;\n    }\n\n    // HELPERS\n    public getAllFromLS(maxtime = 0): Array<any> {\n      const json = localStorage.getItem( 'rest_all_' + this.modelName );\n      if ( json ) {\n        const obj = JSON.parse(json);\n        if ( obj && (obj.date < (Date.now() - maxtime) ) ) {\n          return obj;\n        }\n      }\n    }\n\n\n    public getFromCache(id): any {\n      if (this.lastGetAll) {\n        return this.lastGetAll.find((unit) => unit.id === id);\n      } else {\n        return null;\n      }\n    }\n\n    private getActionUrl() {\n      return this.serverWithApiUrl + this.modelName + '/';\n    }\n\n\n    // REST functions\n    public getAll(): Observable<any[]> {\n        return this.http.get(this.getActionUrl(), { headers: this.headers })\n            .map((response: Response) => {\n              // getting an array having the same name as the model\n              const data = response.json()[this.modelName];\n              // transforming the array from indexed to associative\n              const tab = data.records.map((elem) => {\n                const unit = {};\n                // using the columns order and number to rebuild the object\n                data.columns.forEach( (champ, index) => {\n                  unit[champ] = elem[index];\n                });\n                return unit;\n              });\n              this.lastGetAll = tab;\n              const obj = {\n                data: tab,\n                date: Date.now()\n              };\n              localStorage.setItem( 'rest_all_' + this.modelName, JSON.stringify(obj) );\n              return tab;\n            })\n            .catch(this.handleError);\n    }\n\n    public get(id: number): Observable<any> {\n        return this.http.get(this.getActionUrl() + id, { headers: this.headers })\n            .map((response: Response) => {\n              const data = response.json();\n              this.lastGet = data;\n              return data;\n            })\n            .catch(this.handleError);\n    }\n\n    public add(item: any): Observable<number> {\n        const toAdd = JSON.stringify(item);\n\n        return this.http.post(this.getActionUrl(), toAdd, { headers: this.headers })\n            .map((response: Response) => response.json())\n            .catch(this.handleError);\n    }\n\n    public addAll(tab: Array<any>): Observable<Array<number>> {\n      const toAdd = JSON.stringify(tab);\n\n      return this.http.post(this.getActionUrl(), toAdd, { headers: this.headers })\n          .map((response: Response) => response.json())\n          .catch(this.handleError);\n    }\n\n    public update(id: number, itemToUpdate: any): Observable<number> {\n        return this.http.put(this.getActionUrl() + id, JSON.stringify(itemToUpdate), { headers: this.headers })\n            .map((response: Response) => response.json())\n            .catch(this.handleError);\n    }\n\n    public delete(id: number): Observable<Response> {\n        return this.http.delete(this.getActionUrl() + id, { headers: this.headers })\n            .catch(this.handleError);\n    }\n\n    private handleError(error: Response) {\n        console.error(error);\n        return Observable.throw(error.json().error || 'Server error');\n    }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { ReplaySubject } from 'rxjs/Rx';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class MenuService {\n    private current: ReplaySubject<any> = new ReplaySubject<any>( 1 );\n\n    constructor(\n      private router: Router\n    ) {}\n\n    public setCurrent( menu: any ) {\n      this.current.next( menu );\n    }\n\n    public getCurrent() {\n      return this.current;\n    }\n\n}\n",
    "import { Injectable } from '@angular/core';\nimport { ReplaySubject } from 'rxjs/Rx';\n\n@Injectable()\nexport class LogoService {\n    private current: ReplaySubject<any> = new ReplaySubject<any>( 1 );\n    // default logo\n    public logo: any = {\n      html_mini: '<b>A</b>LT',\n      html_lg: '<b>Admin</b>LTE'\n    };\n\n    constructor() {\n      this.setCurrent(this.logo);\n    }\n\n    /* Redefine the logo */\n    public setCurrent( logo: any ) {\n      if (logo.small || logo.big ) {\n        console.log('NgxAdminLTE: LogoService setCurrent: small and big are now deprecated in logo, use html_mini and html_lg');\n      }\n      this.current.next( logo );\n    }\n\n    public getCurrent() {\n      return this.current;\n    }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { ReplaySubject } from 'rxjs/Rx';\n\n@Injectable()\nexport class FooterService {\n    public current: ReplaySubject<any> = new ReplaySubject<any>( 1 );\n    public default: any = {\n      right_part: 'Anything you want',\n      left_part: `<strong>Copyright &copy; 2016 <a href=\"#\" routerLink=\"/\">Company X</a>.\n    \t</strong> All rights reserved.`\n    }\n\n    constructor() {}\n\n    /* Redefine the footer html */\n    public setCurrent( footer: any ) {\n      this.current.next( footer );\n    }\n\n    public getCurrent() {\n      return this.current;\n    }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { ReplaySubject } from 'rxjs/Rx';\n\n@Injectable()\nexport class ControlSidebarService {\n  // Handle the state (open or closed)\n  private current_state: ReplaySubject<boolean> = new ReplaySubject<boolean>(1);\n  private default_state: any = false;\n  private current_state_value = false;\n\n  // Handle the items\n  private current_items: ReplaySubject<any> = new ReplaySubject<any>(1);\n  private default_items: any = [\n    {\n      id: 'control-sidebar-home-tab',\n      icon: 'home',\n      active: true,\n      items: [\n        {\n          html: `\n            <h3 class='control-sidebar-heading'>Recent Activity</h3>\n            <ul class='control-sidebar-menu'>\n              <li><a href='javascript::;'> <i\n                  class='menu-icon fa fa-birthday-cake bg-red'></i>\n                  <div class='menu-info'>\n                    <h4 class='control-sidebar-subheading'>Langdon's Birthday</h4>\n                    <p>Will be 23 on April 24th</p>\n                  </div>\n              </a></li>\n            </ul>`\n        },\n        {\n          html: `\n            <h3 class='control-sidebar-heading'>Tasks Progress</h3>\n            <ul class='control-sidebar-menu'>\n              <li><a href='javascript::;'>\n                  <h4 class='control-sidebar-subheading'>\n                    Custom Template Design <span\n                      class='label label-danger pull-right'>70%</span>\n                  </h4>\n                  <div class='progress progress-xxs'>\n                    <div class='progress-bar progress-bar-danger' style='width: 70%'></div>\n                  </div>\n              </a></li>\n            </ul>`\n        }\n      ]\n    },\n    {\n      id: 'control-sidebar-settings-tab',\n      icon: 'gear',\n      active: false,\n      items: [\n        {\n          html: `<form method='post'>\n            <h3 class='control-sidebar-heading'>General Settings</h3>\n            <div class='form-group'>\n              <label class='control-sidebar-subheading'> Report panel\n                usage <input type='checkbox' class='pull-right' checked>\n              </label>\n              <p>Some information about this general settings option</p>\n            </div>\n            <!-- /.form-group -->\n          </form>`\n        }\n      ]\n    }\n  ];\n\n  constructor() {\n    this.current_state.next(this.default_state);\n    this.current_items.next(this.default_items);\n  }\n\n  public setItems(items: any) {\n    this.current_items.next(items);\n  }\n\n  public getItems() {\n    return this.current_items;\n  }\n\n  public getState(): ReplaySubject<boolean> {\n    return this.current_state;\n  }\n\n  public setState(val: boolean): void {\n    this.current_state_value = val;\n    this.current_state.next(this.current_state_value);\n  }\n\n  public open(): void {\n    this.setState(true);\n    this.current_state.next(this.current_state_value);\n  }\n\n  public close(): void {\n    this.setState(false);\n  }\n\n  public toggle(): void {\n    this.setState(!this.current_state_value);\n  }\n}\n",
    "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { User } from '../../models/user';\nimport { UserService } from '../../services/user.service';\nimport { MenuService } from '../../services/menu.service';\nimport { LoggerService } from '../../services/logger.service';\nimport { ToasterService, ToasterConfig } from 'angular2-toaster/angular2-toaster';\nimport { TranslateService } from '../../services/translate.service';\n\n@Component( {\n    selector: 'app-layouts-auth',\n    template: `<div class=\"wrapper\">\n\t<app-header\n\t\t[display_messages]='display_messages'\n\t\t[display_notifications]='display_notifications'\n\t\t[display_tasks]='display_tasks'\n\t\t[display_user]='display_user'\n\t\t[display_control]='display_control'\n\t\t[display_logout]='display_logout'\n\t\t[header_components]='header_components'\n    >{{ 'LOADING' | translate }} header...</app-header>\n\t<app-menu-aside\n\t[links]=\"mylinks\"\n\t[display_menu_user]='display_menu_user'\n\t[display_menu_search]='display_menu_search'\n\t>{{ 'LOADING' | translate }} menu...</app-menu-aside>\n\n\t<!-- Content Wrapper. Contains page content -->\n\t<div class=\"content-wrapper\">\n\t\t<!-- Content Header (Page header) -->\n\t\t<toaster-container [toasterconfig]=\"toastrConfig\"></toaster-container>\n\t\t<app-breadcrumb></app-breadcrumb>\n\n\t\t<!-- Main content -->\n\t\t<section class=\"content\">\n\t\t\t<div [ngClass]=\"{'box': boxed_style, 'box-default': boxed_style}\">\n\t\t\t\t<div [ngClass]=\"{'box-body': boxed_style}\">\n\t\t\t\t\t<router-outlet></router-outlet>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</section>\n\t\t<!-- /.content -->\n\t</div>\n\t<!-- /.content-wrapper -->\n\t<app-footer>{{ 'LOADING' | translate }} footer...</app-footer>\n\t<app-control-sidebar *ngIf='display_control_sidebar'>{{ 'LOADING' | translate }} control sidebar...</app-control-sidebar>\n</div>\n<!-- ./wrapper -->\n`\n})\nexport class LayoutAuthComponent implements OnInit, OnDestroy {\n    public toastrConfig: ToasterConfig;\n    public mylinks: Array<any> = [];\n    public skin = 'skin-blue';\n    public display_control = true;\n    public display_user = true;\n    public display_tasks = true;\n    public display_messages = true;\n    public display_notifications = true;\n    public display_menu_user = true;\n    public display_menu_search = true;\n    public display_logout = false;\n    public header_components = [];\n    public boxed_style = true;\n    public display_control_sidebar = true;\n    private logger: LoggerService;\n\n    constructor(\n      private userServ: UserService,\n      private menuServ: MenuService,\n      private toastr: ToasterService,\n      private translate: TranslateService,\n      route: ActivatedRoute) {\n        const param = route.snapshot.data[0];\n        this.skin = this.paramExistOrDefault(param, 'skin', 'skin-blue');\n        this.display_control = this.paramExistOrDefault(param, 'display_control');\n        this.display_user = this.paramExistOrDefault(param, 'display_user');\n        this.display_tasks = this.paramExistOrDefault(param, 'display_tasks');\n        this.display_messages = this.paramExistOrDefault(param, 'display_messages');\n        this.display_notifications = this.paramExistOrDefault(param, 'display_notifications');\n        this.display_menu_user = this.paramExistOrDefault(param, 'display_menu_user');\n        this.display_menu_search = this.paramExistOrDefault(param, 'display_menu_search');\n        this.display_logout = this.paramExistOrDefault(param, 'display_logout', false);\n        this.display_control_sidebar = this.paramExistOrDefault(param, 'display_control_sidebar', true);\n        this.header_components = this.paramExistOrDefault(param, 'header_components', []);\n        this.boxed_style = this.paramExistOrDefault(param, 'boxed_style', true);\n\n        this.toastrConfig = new ToasterConfig( {\n            newestOnTop: true,\n            showCloseButton: true,\n            tapToDismiss: false\n        });\n    }\n\n    private paramExistOrDefault(param: any, index: string, default_value: any = true) {\n      return param.hasOwnProperty(index) ? param[index] : default_value;\n    }\n\n    public ngOnInit(): void {\n        //  sedding the resize event, for AdminLTE to place the height\n        const ie = this.detectIE();\n        if (!ie) {\n            window.dispatchEvent( new Event( 'resize' ) );\n        } else {\n            // solution for IE from @hakonamatata\n            const event = document.createEvent( 'Event' );\n            event.initEvent( 'resize', false, true );\n            window.dispatchEvent( event );\n        }\n\n        // default menu structure, please use the menuService to modify\n        this.mylinks = [\n          {\n            'header': 'NAVIGATION'\n          },\n          {\n            'title': 'Home',\n            'icon': 'dashboard',\n            'link': ['/']\n          }\n        ];\n\n        // register to menu change\n        this.menuServ.getCurrent().subscribe((menu) => {\n          this.mylinks = menu;\n        });\n\n      document.body.className = 'hold-transition ' + this.skin + ' sidebar-mini';\n    }\n\n    public ngOnDestroy(): void {\n      document.body.className = '';\n    }\n\n    protected detectIE(): boolean {\n        const ua: string = window.navigator.userAgent;\n        return ua.includes('MSIE ') || ua.includes('Trident/') || ua.includes('Edge/');\n    }\n\n}\n",
    "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-layout-login',\n  styles: ['./login.css'],\n  template: `<div class=\"login-box\" >\n  <div class=\"login-logo\">\n    <app-logo [hide]='\"mini\"'></app-logo>\n  </div>\n  <!-- /.login-logo -->\n  <div class=\"login-box-body\">\n    <router-outlet></router-outlet>\n  </div>\n  <!-- /.login-box-body -->\n</div>\n<!-- /.login-box -->\n`\n})\nexport class LayoutLoginComponent implements OnInit, OnDestroy {\n\n  constructor(\n  ) {\n  }\n\n  public ngOnInit() {\n    window.dispatchEvent( new Event( 'resize' ) );\n    document.body.className = 'hold-transition login-page';\n  }\n\n  public ngOnDestroy() {\n    document.body.className = '';\n  }\n\n}\n",
    "import { Component, OnInit, OnDestroy } from '@angular/core';\n\n@Component({\n  selector: 'app-layout-register',\n  template: `<body class=\"hold-transition register-page\">\n<div class=\"register-box\">\n  <div class=\"register-logo\">\n    <app-logo></app-logo>\n  </div>\n\n  <div class=\"register-box-body\">\n    <router-outlet></router-outlet>\n  </div>\n  <!-- /.form-box -->\n</div>\n<!-- /.register-box -->\n</body>\n`\n})\nexport class LayoutRegisterComponent implements OnInit {\n\n  constructor( ) {\n    // TODO\n  }\n\n  public ngOnInit() {\n    // TODO\n  }\n\n}\n",
    "import { User } from './user';\n\nexport class Message {\n  public content: string;\n  public title: string;\n  public author: User;\n  public destination: User;\n  public date: string;\n\n  public constructor(data: any = {}) {\n    this.content = data.content || '';\n    this.title = data.title || '';\n    this.author = data.author || null;\n    this.destination = data.destination || null;\n    this.date = data.date || Date.now();\n  }\n}\n",
    "export class Preference {\n    public avatarUrl: string;\n    public preferredLang: string;\n\n    public constructor( data: any = {}) {\n        this.avatarUrl = data.avatarUrl || '';\n        this.preferredLang = data.preferredLang || null;\n    }\n\n}\n",
    "export class Notification {\n  public content: string;\n  public class: string;\n  public link: string;\n\n  public constructor(data: any = {}) {\n    this.content = data.content || '';\n    this.class = data.class || '';\n    this.link = data.link || '';\n  }\n}\n",
    "import { Pipe, PipeTransform } from '@angular/core';\nimport { SafeHtml, DomSanitizer } from '@angular/platform-browser';\n\n@Pipe({name: 'safeHtml'})\nexport class SafeHtmlPipe implements PipeTransform {\n    constructor(private sanitized: DomSanitizer) {\n    }\n    transform(value: string) {\n        return this.sanitized.bypassSecurityTrustHtml(value);\n    }\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { UserService } from '../../services/user.service';\nimport { ControlSidebarService } from '../../services/control-sidebar.service';\n\n@Component( {\n    selector: 'app-header',\n    styles: [``],\n    template: `<!-- Main Header -->\n<header class=\"main-header\">\n\t<!-- Logo -->\n\t<app-logo></app-logo>\n\t<!-- Header Navbar -->\n\t<nav class=\"navbar navbar-static-top\" role=\"navigation\">\n\t\t<!-- Sidebar toggle button-->\n\t\t<a class=\"sidebar-toggle\" data-toggle=\"offcanvas\" role=\"button\">\n\t\t\t<!-- ADMIN LTE 2.4.0  <a class=\"sidebar-toggle\" data-toggle=\"push-menu\" role=\"button\"> -->\n      <span class=\"sr-only\">Toggle navigation</span>\n\t\t</a>\n\t\t<!-- Navbar Right Menu -->\n\t\t<div class=\"navbar-custom-menu\">\n\t\t\t<ul class=\"nav navbar-nav\" >\n\t\t\t\t<!-- Messages: style can be found in dropdown.less-->\n\t\t\t\t<li class=\"dropdown messages-menu messagesBox\" *ngIf=\"display_messages\"></li>\n\t\t\t\t<!-- Notifications Menu -->\n\t\t\t\t<li class=\"dropdown notifications-menu notificationsBox\" *ngIf=\"display_notifications\"></li>\n\t\t\t\t<!-- Tasks Menu -->\n\t\t\t\t<li class=\"dropdown tasks-menu tasksBox\" *ngIf=\"display_tasks\"></li>\n\t\t\t\t<!-- User Account Menu -->\n        <li class=\"dropdown user user-menu userBox\" *ngIf=\"display_user\"></li>\n        <li *ngIf=\"display_logout\">\n\t\t\t\t\t<button class=\"btn btn-primary btn-lg\" (click)=\"logout()\">\n\t\t\t\t\t\t<i class=\"fa fa-power-off\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t</li>\n\t\t\t\t<!-- Control Sidebar Toggle Button -->\n\t\t\t\t<li>\n\t\t\t\t\t<a class=\"toggle-sidebar-right\" role=\"button\" *ngIf=\"display_control\">\n\t\t\t\t\t\t<i class=\"fa fa-gears\" (click)=\"toggleSidebar()\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t\t<!-- Additionnal components -->\n\t\t\t\t<ng-container *ngFor=\"let widget of header_components\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<app-component-loader [class_component]=\"widget.class\" [data]=\"widget.data\"></app-component-loader>\n\t\t\t\t\t</li>\n\t\t\t\t</ng-container>\n\t\t\t</ul>\n\t\t</div>\n\t</nav>\n</header>\n`\n})\nexport class AppHeaderComponent {\n  @Input() public display_messages = true;\n  @Input() public display_notifications = true;\n  @Input() public display_tasks = true;\n  @Input() public display_user = true;\n  @Input() public display_control = true;\n  @Input() public display_logout = false;\n  @Input() public header_components = [];\n\n  constructor(\n    private userService: UserService,\n    private sidebarService: ControlSidebarService\n  ) { }\n\n  logout(): void {\n    this.userService.logout();\n  }\n\n  toggleSidebar() {\n    this.sidebarService.toggle();\n  }\n\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { LogoService } from '../../services/logo.service';\n\n@Component( {\n    selector: 'app-logo',\n    template: `<!-- Logo -->\n<a href=\"#\" routerLink=\"/\" class=\"logo\"> <!-- mini logo for sidebar mini 50x50 pixels -->\n\t<ng-container *ngIf=\"hide !== 'mini'\">\n\t\t<ng-container *ngIf=\"logo?.html_mini; else oldsyntaxmini\">\n\t\t\t<span class=\"logo-mini\" [innerHtml]=\"logo?.html_mini | safeHtml\"></span>\n\t\t</ng-container>\n\t\t<ng-template #oldsyntaxmini>\n\t\t\t<span class=\"logo-mini\"><b>{{logo.small.bold}}</b>{{logo.small.normal}}</span> <!-- logo for regular state and mobile devices -->\n\t\t</ng-template>\n\t</ng-container>\n\n\t<ng-container *ngIf=\"hide !== 'lg'\">\n\t\t<ng-container *ngIf=\"logo?.html_lg; else oldsyntaxlg\">\n\t\t\t<span class=\"logo-lg\" [innerHtml]=\"logo?.html_lg | safeHtml\"></span>\n\t\t</ng-container>\n\t\t<ng-template #oldsyntaxlg>\n\t\t\t<span class=\"logo-lg\" ><b>{{logo.big.bold}}</b>{{logo.big.normal}}</span>\n\t\t</ng-template>\n\t</ng-container>\n</a>\n`\n})\nexport class LogoComponent implements OnInit {\n  public logo: any;\n  @Input() hide = '';\n\n  constructor(\n    private logoServ: LogoService\n  ) { }\n\n  public ngOnInit() {\n    this.logoServ.getCurrent().subscribe((logo) => {\n      this.logo = logo;\n    });\n  }\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { FooterService } from '../../services/footer.service';\n\n@Component( {\n    selector: 'app-footer',\n    styles: [``],\n    template: `<!-- Main Footer -->\n<footer class=\"main-footer\">\n\t<!-- To the right -->\n\t<div class=\"pull-right hidden-xs\" [innerHTML]=\"footer?.right_part | safeHtml\"></div>\n\t<!-- Default to the left -->\n\t<div [innerHtml]=\"footer?.left_part | safeHtml\"></div>\n</footer>\n`\n})\nexport class AppFooterComponent {\n    public footer: any = {};\n\n    constructor( private footerServ: FooterService) {\n      this.footerServ.getCurrent().subscribe( footer => this.footer = footer);\n    }\n}\n",
    "import { Component, OnInit, Input } from '@angular/core';\nimport { User } from '../../models/user';\nimport { Router } from '@angular/router';\nimport { UserService } from '../../services/user.service';\n\n@Component({\n  selector: 'app-menu-aside',\n  styles: [``],\n  template: `<!-- Left side column. contains the logo and sidebar -->\n<aside class=\"main-sidebar\">\n\t<!-- sidebar: style can be found in sidebar.less -->\n\t<section class=\"sidebar\" >\n\t\t<!-- Sidebar user panel (optional) -->\n\t\t<div *ngIf=\"display_menu_user\" class=\"user-panel\">\n\t\t\t<div class=\"pull-left image\" *ngIf=\"currentUser?.avatarUrl\" >\n\t\t\t\t<img [src]=\"currentUser?.avatarUrl\" class=\"img-circle\"\n\t\t\t\t\t[alt]=\"currentUser?.getName()\">\n\t\t\t</div>\n\t\t\t<div class=\"pull-left info\">\n\t\t\t\t<p>{{currentUser?.getName()}}</p>\n\t\t\t\t<!-- Status -->\n\t\t\t\t<a href=\"#\"><i class=\"fa fa-circle text-success\"></i> Online</a>\n\t\t\t</div>\n\t\t</div>\n\t\t<!-- search form (Optional) -->\n\t\t<form *ngIf=\"display_menu_search\" action=\"#\" method=\"get\" class=\"sidebar-form\">\n\t\t\t<div class=\"input-group\">\n\t\t\t\t<input type=\"text\" name=\"q\" class=\"form-control\"\n\t\t\t\t\tplaceholder=\"Search...\"> <span class=\"input-group-btn\">\n\t\t\t\t\t<button type=\"submit\" name=\"search\" id=\"search-btn\"\n\t\t\t\t\t\tclass=\"btn btn-flat\">\n\t\t\t\t\t\t<i class=\"fa fa-search\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t</form>\n\t\t<!-- /.search form -->\n\t\t<!-- Sidebar Menu -->\n\t\t<ul class=\"sidebar-menu\" data-widget=\"tree\">\n\t\t\t<ng-container *ngFor=\"let item of links\">\n\t\t\t\t<!-- HEADER -->\n\t\t\t\t<ng-container *ngIf=\"item.header\">\n\t\t\t\t\t<li class=\"header\">{{item.header}}</li>\n\t\t\t\t</ng-container>\n\t\t\t\t<!-- COMPONENT -->\n\t\t\t\t<ng-container *ngIf=\"item.class\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<app-component-loader [class_component]=\"item.class\" [data]=\"item.data\"></app-component-loader>\n\t\t\t\t\t</li>\n\t\t\t\t</ng-container>\n\t\t\t\t<!-- LINK -->\n\t\t\t\t<ng-container *ngIf=\"item.link\">\n\t\t\t\t\t<li [class.active]=\"item.link[0] === currentUrl\">\n\t\t\t\t\t\t<a *ngIf=\"!item.external\" [routerLink]=\"item.link\">\n\t\t\t\t\t\t\t<i class=\"fa fa-{{item.icon}}\"></i>\n\t\t\t\t\t\t\t<span>{{item.title}}</span>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a *ngIf=\"item.external\" [href]=\"item.link\" [target]=\"item.target\">\n\t\t\t\t\t\t\t<i class=\"fa fa-{{item.icon}}\"></i>\n\t\t\t\t\t\t\t<span>{{item.title}}</span>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t</ng-container>\n\t\t\t\t<!-- LINK WITH SUBLINKS -->\n\t\t\t\t<ng-container *ngIf=\"item.sublinks\">\n\t\t\t\t\t<li class=\"treeview\">\n\t\t\t\t\t\t<a href=\"#\">\n\t\t\t\t\t\t\t<i *ngIf=\"item.icon\" class=\"fa fa-{{item.icon}}\"></i>\n\t\t\t\t\t\t\t<span>{{item.title}}</span>\n\t\t\t\t\t\t\t<span class=\"pull-right-container\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-angle-left pull-right\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<!--i class=\"fa fa-angle-left pull-right\"></i-->\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<ul class=\"treeview-menu\">\n\t\t\t\t\t\t\t<ng-container *ngFor=\"let subitem of item.sublinks\">\n\t\t\t\t\t\t\t\t<li [class.active]=\"subitem.link[0] === currentUrl\">\n\t\t\t\t\t\t\t\t\t<a *ngIf=\"!subitem.external\" [routerLink]=\"subitem.link\">\n\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"subitem.icon\" class=\"fa fa-{{subitem.icon}}\"></i>\n\t\t\t\t\t\t\t\t\t\t<span>{{subitem.title}}</span>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t<a *ngIf=\"subitem.external\" [href]=\"subitem.link\" [target]=\"subitem.target\">\n\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"subitem.icon\" class=\"fa fa-{{subitem.icon}}\"></i>\n\t\t\t\t\t\t\t\t\t\t<span>{{subitem.title}}</span>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</li>\n\t\t\t\t</ng-container>\n\t\t\t</ng-container>\n\t\t</ul>\n\t\t<!-- /.sidebar-menu -->\n\t</section>\n\t<!-- /.sidebar -->\n</aside>\n`\n})\nexport class MenuAsideComponent implements OnInit {\n  public currentUrl: string;\n  public currentUser: User = new User();\n\n  @Input() links: Array<any> = [];\n  @Input() display_menu_user = true;\n  @Input() display_menu_search = true;\n\n  constructor(\n    private userServ: UserService,\n    public router: Router\n  ) {\n    // getting the current url\n    this.router.events.subscribe((evt: any) => this.currentUrl = evt.url);\n    this.userServ.getCurrent().subscribe((user) => this.currentUser = user);\n  }\n\n  public ngOnInit() { }\n\n}\n",
    "import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { ControlSidebarService } from '../../services/control-sidebar.service';\n\n@Component({\n  selector: 'app-control-sidebar',\n  styles: [``],\n  template: `<!-- Control Sidebar -->\n<aside [ngClass]=\"{\n\t'control-sidebar': true,\n\t'control-sidebar-dark': true,\n\t'control-sidebar-open': _sidebar.getState() | async\n}\">\n    <!-- Create the tabs -->\n    <ul class=\"nav nav-tabs nav-justified control-sidebar-tabs\">\n        <ng-container *ngFor=\"let item of items\">\n            <li [ngClass]=\"{'active': item.active}\">\n                <a href=\"{{ item.id }}\" data-toggle=\"tab\"><i class=\"fa fa-{{ item.icon }}\"></i></a>\n            </li>\n        </ng-container>\n    </ul>\n    <!-- Tab panes -->\n    <div class=\"tab-content\">\n        <ng-container *ngFor=\"let item of items\">\n            <!-- Home tab content -->\n            <div [ngClass]=\"{'active': item.active, 'tab-pane': true}\" id=\"{{ item.id }}\">\n                <ng-container *ngFor=\"let subitem of item.items\">\n                    <!-- COMPONENT -->\n                    <ng-container *ngIf=\"subitem.class\">\n                        <li>\n                            <app-component-loader [class_component]=\"subitem.class\" [data]=\"subitem.data\"></app-component-loader>\n                        </li>\n                    </ng-container>\n                    <ng-container *ngIf=\"subitem.html\">\n                        {{ subitem.html | safeHtml }}\n                    </ng-container>\n                </ng-container>\n            </div>\n        </ng-container>\n    </div>\n</aside>\n<!-- /.control-sidebar -->\n<!-- Add the sidebar's background. This div must be placed\n               immediately after the control sidebar -->\n<div class=\"control-sidebar-bg\"></div>`\n})\nexport class ControlSidebarComponent implements OnDestroy, OnInit {\n  public items: any[];\n  private subs: any[];\n\n  constructor (public _sidebar: ControlSidebarService) { }\n\n  public ngOnInit () {\n    const sub = this._sidebar.getItems().subscribe(items => {\n      this.items = items;\n    });\n    this.subs = [];\n    this.subs.push(sub);\n  }\n\n  public ngOnDestroy () {\n    this.subs.forEach((sub) => sub.unsubscribe());\n    this.subs = null;\n    this.items = null;\n  }\n}\n",
    "import { Component, OnInit, Input } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { TranslateService } from '@ngx-translate/core';\nimport { MessagesService } from '../../services/messages.service';\nimport { LoggerService } from '../../services/logger.service';\nimport { Message } from '../../models/message';\n\n@Component( {\n    /* tslint:disable */\n    selector: '.messagesBox',\n    /* tslint:enable */\n    styles: [``],\n    template: `<!-- Menu toggle button -->\n<a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"> <i\n\tclass=\"fa fa-envelope-o\"></i> <span class=\"label label-success\"\n\t[innerHTML]=\"messages.length\"></span>\n</a>\n<ul class=\"dropdown-menu\">\n\t<li class=\"header\">{{ 'MSGBOX.COUNT' | translate:msgLength }}</li>\n\t<li>\n\t\t<!-- inner menu: contains the messages -->\n\t\t<ul class=\"menu\">\n\t\t\t<li *ngFor=\"let msg of messages; let i = index\">\n\t\t\t\t<!-- start message --> <a href=\"#\">\n\t\t\t\t\t<div class=\"pull-left\">\n\t\t\t\t\t\t<!-- User Image -->\n\t\t\t\t\t\t<img src=\"{{msg.author.avatarUrl}}\" class=\"img-circle\"\n\t\t\t\t\t\t\talt=\"{{ msg.author.getName() }}\">\n\t\t\t\t\t</div> <!-- Message title and timestamp -->\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t{{msg.title}} <small><i class=\"fa fa-clock-o\"></i>\n\t\t\t\t\t\t\t{{msg.date | date:'yMd' }}</small>\n\t\t\t\t\t</h4> <!-- The message -->\n\t\t\t\t\t<p>{{msg.content}}</p>\n\t\t\t</a>\n\t\t\t</li>\n\t\t\t<!-- end message -->\n\t\t</ul> <!-- /.menu -->\n\t</li>\n\t<li class=\"footer\">\n    <a href=\"#\">{{ 'MSGBOX.FOOTER' | translate }}</a>\n  </li>\n</ul>\n`\n})\nexport class MessagesBoxComponent implements OnInit {\n    // Declaring the variable for binding with initial value\n    public messages: Message[];\n    msgLength = { 0: 0 };\n\n    constructor( private msgServ: MessagesService, private logger: LoggerService ) {\n        this.messages = [];\n    }\n\n    public ngOnInit() {\n        // Every incoming message changes entire local message Array.\n        this.msgServ.messages.subscribe(( msg: Message[] ) => {\n            this.logger.log( 'MsgBox', null, 'RECEIVED.MESSAGE', null );\n            this.messages = msg;\n            this.msgLength = { 0: this.messages.length };\n        });\n    }\n}\n",
    "import { Component, OnInit } from '@angular/core';\nimport { Notification } from '../../models/notification';\nimport { NotificationsService } from '../../services/notifications.service';\nimport { Http } from '@angular/http';\nimport { TranslateService } from '@ngx-translate/core';\nimport { LoggerService } from '../../services/logger.service';\n\n@Component( {\n    /* tslint:disable */\n    selector: '.notificationsBox',\n    /* tslint:enable */\n    styles: [``],\n    template: `<!-- Menu toggle button -->\n<a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\n\t<i class=\"fa fa-bell-o\"></i>\n\t<span class=\"label label-warning\">{{ notifications.length }}</span>\n</a>\n<ul class=\"dropdown-menu\">\n\t<li class=\"header\">{{ 'NOTIFBOX.COUNT' | translate:notifLength }}</li>\n\t<li>\n\t\t<!-- Inner Menu: contains the notifications -->\n\t\t<ul class=\"menu\">\n\t\t\t<li *ngFor=\"let notif of notifications.reverse(); let i = index\">\n\t\t\t\t<a routerLink=\"{{notif.link}}\">\n\t\t\t\t\t<i class=\"{{notif.class}}\"></i> {{notif.content}}\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t\t<!-- end notification -->\n\t\t</ul>\n\t</li>\n\t<li class=\"footer\">\n\t\t<a href=\"#\">\n\t\t\t{{ 'NOTIFBOX.FOOTER' | translate }}\n\t\t</a>\n\t</li>\n</ul>\n`\n})\nexport class NotificationBoxComponent implements OnInit {\n\n    public notifications: Notification[];\n    notifLength = { 0: 0 };\n\n    constructor( private notifServ: NotificationsService, private logger: LoggerService ) {\n        this.notifications = [];\n    }\n\n    public ngOnInit() {\n        // Every incoming notification changes entire local notification Array.\n        this.notifServ.notifications.subscribe(( notif: Notification[] ) => {\n            this.logger.log( 'NotificationBox', null, 'RECEIVED.NOTIFICATION', null );\n            this.notifications = notif;\n            this.notifLength = { 0: this.notifications.length };\n        });\n    }\n\n}\n",
    "import { Component, OnInit, Input } from '@angular/core';\nimport { Message } from '../../models/message';\n\n@Component( {\n    /* tslint:disable */\n    selector: '.tasksBox',\n    /* tslint:enable */\n    styles: [``],\n    template: `<!-- Menu Toggle Button -->\n<a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"> <i\n\tclass=\"fa fa-flag-o\"></i> <span class=\"label label-danger\">9</span>\n</a>\n<ul class=\"dropdown-menu\">\n\t<li class=\"header\">{{ 'TASKBOX.COUNT' | translate:tasksLength }}</li>\n\t<li>\n\t\t<!-- Inner menu: contains the tasks -->\n\t\t<ul class=\"menu\">\n\t\t\t<li>\n\t\t\t\t<!-- Task item --> <a href=\"#\"> <!-- Task title and progress text -->\n\t\t\t\t\t<h3>\n\t\t\t\t\t\tDesign some buttons <small class=\"pull-right\">20%</small>\n\t\t\t\t\t</h3> <!-- The progress bar -->\n\t\t\t\t\t<div class=\"progress xs\">\n\t\t\t\t\t\t<!-- Change the css width attribute to simulate progress -->\n\t\t\t\t\t\t<div class=\"progress-bar progress-bar-aqua\" style=\"width: 20%\"\n\t\t\t\t\t\t\trole=\"progressbar\" aria-valuenow=\"20\" aria-valuemin=\"0\"\n\t\t\t\t\t\t\taria-valuemax=\"100\">\n\t\t\t\t\t\t\t<span class=\"sr-only\">20% Complete</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t</a>\n\t\t\t</li>\n\t\t\t<!-- end task item -->\n\t\t</ul>\n\t</li>\n\t<li class=\"footer\"><a href=\"#\">{{ 'TASKBOX.FOOTER' | translate\n\t\t\t}}</a></li>\n</ul>\n`\n})\nexport class TasksBoxComponent implements OnInit {\n\n    messages: Message[];\n    tasksLength: {} = { 0: 0 };\n    @Input() public user;\n\n    constructor() {}\n\n    public ngOnInit() {}\n\n}\n",
    "import { Component, OnInit } from '@angular/core';\nimport { User } from '../../models/user';\nimport { UserService } from '../../services/user.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  /* tslint:disable */\n  selector: '.userBox',\n  /* tslint:enable */\n  styles: [``],\n  template: `<!-- Menu Toggle Button -->\n<a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\n  <!-- The user image in the navbar-->\n  <img *ngIf=\"currentUser.avatarUrl != ''\" [src]=\"currentUser.avatarUrl\" class=\"user-image\" [alt]=\"currentUser.getName()\">\n  <!-- hidden-xs hides the username on small devices so only the image appears. -->\n  <span class=\"hidden-xs\">{{currentUser.getName()}}</span>\n</a>\n<ul class=\"dropdown-menu\">\n  <!-- The user image in the menu -->\n  <li class=\"user-header\">\n    <img *ngIf=\"currentUser.avatarUrl != ''\" [src]=\"currentUser.avatarUrl\" class=\"img-circle\" [alt]=\"currentUser.getName()\">\n    <p>\n      {{currentUser.getName()}} - Web Developer\n      <small>{{ 'USERBOX.MEMBERSINCE' | translate }} {{currentUser.creationDate}}</small>\n    </p>\n  </li>\n  <!-- Menu Body -->\n  <li class=\"user-body\">\n    <div class=\"col-xs-4 text-center\">\n      <a href=\"#\">Followers</a>\n    </div>\n    <div class=\"col-xs-4 text-center\">\n      <a href=\"#\">Sales</a>\n    </div>\n    <div class=\"col-xs-4 text-center\">\n      <a href=\"#\">Friends</a>\n    </div>\n  </li>\n  <!-- Menu Footer-->\n  <li class=\"user-footer\">\n    <div class=\"pull-left\">\n      <a href=\"#\" class=\"btn btn-default btn-flat\">{{ 'USERBOX.PROFILE' | translate }}</a>\n    </div>\n    <div class=\"pull-right\">\n      <a (click)=\"logout()\" class=\"btn btn-default btn-flat\">{{ 'USERBOX.SIGNOUT' | translate }}</a>\n    </div>\n  </li>\n</ul>\n`\n})\nexport class UserBoxComponent implements OnInit {\n\n  // default user, only an example, please use the userService to modify\n  public currentUser: User =  new User({\n      avatarUrl: 'assets/img/user2-160x160.jpg',\n      email: 'weber.antoine@outlook.com',\n      firstname: 'WEBER',\n      lastname: 'Antoine'\n  });\n\n  constructor(private userServ: UserService, private router: Router) {\n    // se connecter au modif du user courant\n    this.userServ.getCurrent().subscribe((user: User) => this.currentUser = user);\n  }\n\n  public ngOnInit() {\n    // TODO\n  }\n\n  public logout = (): void => {\n    this.userServ.logout();\n  }\n}\n",
    "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BreadcrumbService } from '../../services/breadcrumb.service';\n\n@Component({\n  selector: 'app-breadcrumb',\n  template: `<section class=\"content-header\" *ngIf=\"display\">\n  <h1>\n    {{ header }}\n    <small>{{ description }}</small>\n  </h1>\n  <ol class=\"breadcrumb\">\n    <ng-container *ngFor=\"let item of levels\">\n      <li [class.active]=\"item.active\">\n        <a [routerLink]=\"item.link\">\n          <i *ngIf=\"item.icon !=null\" class=\"fa fa-{{item.icon}}\"></i> {{ item.title }}\n        </a>\n      </li>\n    </ng-container>\n  </ol>\n</section>\n`\n})\nexport class BreadcrumbComponent {\n  public display = false;\n  public header = '';\n  public description = '';\n  public levels: Array<any> = [];\n\n  constructor(private breadServ: BreadcrumbService) {\n    // getting the data from the services\n    this.breadServ.getCurrent().subscribe((data) => {\n      this.display = data.display;\n      this.header = data.header;\n      this.description = data.description;\n      this.levels = data.levels;\n    });\n  }\n\n}\n",
    "import { Component, Input, OnInit, OnDestroy, OnChanges, ComponentRef,\n    ComponentFactoryResolver, ViewContainerRef, ViewChild, ViewEncapsulation} from '@angular/core';\n\n/**\n * Component to dynamicly load other component\n */\n@Component({\n    selector: 'app-component-loader',\n    encapsulation: ViewEncapsulation.None,\n    template: '<ng-container #destination ></ng-container>'\n})\nexport class ComponentLoaderComponent implements OnInit, OnDestroy, OnChanges {\n\n    /**\n     * class of the component to load\n     */\n    @Input() class_component: any = null;\n\n    /**\n     * data to pass to component\n     */\n    @Input() data: any = null;\n\n    /**\n     * component reference in dom\n     */\n    @ViewChild('destination', {read: ViewContainerRef}) viewContainerRef;\n    /**\n     * component reference\n     */\n    private componentRef: any = null;\n\n    /**\n     * Component initialisation\n     */\n    constructor(\n        private _factoryResolver: ComponentFactoryResolver\n    ) { }\n\n\n    /**\n     * Lifecycle hook OnInit\n     */\n    ngOnInit() {\n        // Build the child component\n        const factory = this._factoryResolver.resolveComponentFactory(this.class_component);\n        this.componentRef = this.viewContainerRef.createComponent(factory);\n\n        // then give some data\n        this.setComponentData(this.data);\n    }\n\n    /**\n     * Lifecycle hook OnChanges, on modification of data send it to the child\n     */\n    ngOnChanges(changes) {\n        this.setComponentData(changes);\n    }\n\n    /**\n     * Send data to the inner component\n     */\n    private setComponentData(changes) {\n        if (this.componentRef) {\n        // send data to component\n        Object.assign(this.componentRef.instance, changes);\n        // trigger component ngOnChange\n        this.componentRef.instance.ngOnChanges( changes );\n        }\n    }\n\n    /**\n     * Lifecycle hook OnDestroy\n     */\n    ngOnDestroy() {\n        if (this.componentRef) {\n        this.componentRef.destroy();\n        }\n    }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { HttpModule, Http } from '@angular/http';\nimport { RouterModule } from '@angular/router';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { ToasterModule, ToasterService } from 'angular2-toaster/angular2-toaster';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\n\n// AoT requires an exported function for factories\nexport function HttpLoaderFactory (httpClient) {\n  return new TranslateHttpLoader(httpClient, 'assets/i18n/', '.json');\n}\n\n// Pipes\nimport { SafeHtmlPipe } from './pipes/safe-html.pipes';\n\n// Widgets\nimport { AppHeaderComponent } from './widgets/app-header/app-header.component';\nimport { LogoComponent } from './widgets/logo/logo.component';\nimport { AppFooterComponent } from './widgets/app-footer/app-footer.component';\nimport { MenuAsideComponent } from './widgets/menu-aside/menu-aside.component';\nimport { ControlSidebarComponent } from './widgets/control-sidebar/control-sidebar.component';\nimport { MessagesBoxComponent } from './widgets/messages-box/messages-box.component';\nimport { NotificationBoxComponent } from './widgets/notification-box/notification-box.component';\nimport { TasksBoxComponent } from './widgets/tasks-box/tasks-box.component';\nimport { UserBoxComponent } from './widgets/user-box/user-box.component';\nimport { BreadcrumbComponent } from './widgets/breadcrumb/breadcrumb.component';\nimport { ComponentLoaderComponent } from './widgets/component-loader/component-loader.component';\n\n// Services\nimport { UserService } from './services/user.service';\nimport { MenuService } from './services/menu.service';\nimport { LogoService } from './services/logo.service';\nimport { FooterService } from './services/footer.service';\nimport { MessagesService } from './services/messages.service';\nimport { CanActivateGuard } from './services/can-activate-guard.service';\nimport { NotificationsService } from './services/notifications.service';\nimport { BreadcrumbService } from './services/breadcrumb.service';\nimport { TranslateService } from './services/translate.service';\nimport { LoggerService } from './services/logger.service';\nimport { ControlSidebarService } from './services/control-sidebar.service';\n\n// Layouts\nimport { LayoutAuthComponent } from './layouts/auth/auth';\nimport { LayoutLoginComponent } from './layouts/login/login.component';\nimport { LayoutRegisterComponent } from './layouts/register/register.component';\n\n\n@NgModule({\n  declarations: [\n    // PIPES\n    SafeHtmlPipe,\n    // WIDGETS\n    BreadcrumbComponent,\n    AppHeaderComponent,\n    LogoComponent,\n    AppFooterComponent,\n    MenuAsideComponent,\n    ControlSidebarComponent,\n    MessagesBoxComponent,\n    NotificationBoxComponent,\n    TasksBoxComponent,\n    UserBoxComponent,\n    ComponentLoaderComponent,\n    // LAYOUTS\n    LayoutAuthComponent,\n    LayoutLoginComponent,\n    LayoutRegisterComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpModule,\n    RouterModule,\n    ToasterModule,\n    HttpClientModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: (HttpLoaderFactory),\n        deps: [HttpClient]\n      }\n    }),\n  ],\n  exports: [\n    SafeHtmlPipe,\n  ],\n  providers: [\n    // SERVICES\n    UserService,\n    MenuService,\n    LogoService,\n    FooterService,\n    BreadcrumbService,\n    MessagesService,\n    CanActivateGuard,\n    NotificationsService,\n    TranslateService,\n    LoggerService,\n    ControlSidebarService,\n    ToasterService\n  ]\n})\nexport class NgxAdminLteModule { }\n"
  ],
  "names": [
    "BreadcrumbService",
    "this",
    "initialData",
    "description",
    "display",
    "header",
    "levels",
    "icon",
    "link",
    "title",
    "current",
    "ReplaySubject",
    "clear",
    "prototype",
    "setCurrent",
    "data",
    "next",
    "getCurrent",
    "type",
    "Injectable",
    "User",
    "connected",
    "firstname",
    "lastname",
    "email",
    "avatarUrl",
    "creationDate",
    "creation_date",
    "Date",
    "now",
    "preferredLang",
    "getName",
    "UserService",
    "router",
    "user",
    "logout",
    "logoutAction",
    "navigate",
    "Router",
    "CanActivateGuard",
    "userService",
    "_this",
    "subscribe",
    "canActivate",
    "langs",
    "langmatch",
    "TranslateService$1",
    "userServ",
    "translate",
    "lang",
    "addLangs",
    "setDefaultLang",
    "currentUser",
    "browserLang",
    "getBrowserLang",
    "browserCultureLang",
    "getBrowserCultureLang",
    "console",
    "log",
    "useLang",
    "prefLang",
    "match",
    "use",
    "ngOnInit",
    "getTranslate",
    "NGXTranslateService",
    "LoggerService",
    "component",
    "msg",
    "i18nRef",
    "params",
    "0",
    "1",
    "2",
    "get",
    "res",
    "TranslateService",
    "MessagesService",
    "messagesList",
    "newMessages",
    "Subject",
    "messages",
    "updates",
    "create",
    "ope",
    "map",
    "message",
    "concat",
    "addMessage",
    "NotificationsService",
    "notificationsList",
    "newNotifications",
    "notifications",
    "notification",
    "addNotification",
    "RestService",
    "http",
    "modelName",
    "headers",
    "Headers",
    "append",
    "setApiUrl",
    "url",
    "serverWithApiUrl",
    "getAllFromLS",
    "maxtime",
    "json",
    "localStorage",
    "getItem",
    "obj",
    "JSON",
    "parse",
    "date",
    "getFromCache",
    "id",
    "lastGetAll",
    "find",
    "unit",
    "getActionUrl",
    "getAll",
    "response",
    "tab",
    "records",
    "elem",
    "columns",
    "forEach",
    "champ",
    "index",
    "setItem",
    "stringify",
    "catch",
    "handleError",
    "lastGet",
    "add",
    "item",
    "toAdd",
    "post",
    "addAll",
    "update",
    "itemToUpdate",
    "put",
    "delete",
    "error",
    "Observable",
    "throw",
    "Http",
    "MenuService",
    "menu",
    "LogoService",
    "logo",
    "html_mini",
    "html_lg",
    "small",
    "big",
    "FooterService",
    "default",
    "right_part",
    "left_part",
    "footer",
    "ControlSidebarService",
    "current_state",
    "default_state",
    "current_state_value",
    "current_items",
    "default_items",
    "active",
    "items",
    "html",
    "setItems",
    "getItems",
    "getState",
    "setState",
    "val",
    "open",
    "close",
    "toggle",
    "LayoutAuthComponent",
    "menuServ",
    "toastr",
    "route",
    "mylinks",
    "skin",
    "display_control",
    "display_user",
    "display_tasks",
    "display_messages",
    "display_notifications",
    "display_menu_user",
    "display_menu_search",
    "display_logout",
    "header_components",
    "boxed_style",
    "display_control_sidebar",
    "param",
    "snapshot",
    "paramExistOrDefault",
    "toastrConfig",
    "ToasterConfig",
    "newestOnTop",
    "showCloseButton",
    "tapToDismiss",
    "default_value",
    "hasOwnProperty",
    "detectIE",
    "event",
    "document",
    "createEvent",
    "initEvent",
    "window",
    "dispatchEvent",
    "Event",
    "body",
    "className",
    "ngOnDestroy",
    "ua",
    "navigator",
    "userAgent",
    "includes",
    "Component",
    "args",
    "selector",
    "template",
    "ToasterService",
    "ActivatedRoute",
    "LayoutLoginComponent",
    "styles",
    "LayoutRegisterComponent",
    "Message",
    "content",
    "author",
    "destination",
    "Preference",
    "Notification",
    "class",
    "SafeHtmlPipe",
    "sanitized",
    "transform",
    "value",
    "bypassSecurityTrustHtml",
    "Pipe",
    "name",
    "DomSanitizer",
    "AppHeaderComponent",
    "sidebarService",
    "toggleSidebar",
    "Input",
    "LogoComponent",
    "logoServ",
    "hide",
    "AppFooterComponent",
    "footerServ",
    "MenuAsideComponent",
    "links",
    "events",
    "evt",
    "currentUrl",
    "ControlSidebarComponent",
    "_sidebar",
    "sub",
    "subs",
    "push",
    "unsubscribe",
    "MessagesBoxComponent",
    "msgServ",
    "logger",
    "msgLength",
    "length",
    "NotificationBoxComponent",
    "notifServ",
    "notifLength",
    "notif",
    "TasksBoxComponent",
    "tasksLength",
    "UserBoxComponent",
    "BreadcrumbComponent",
    "breadServ",
    "ComponentLoaderComponent",
    "_factoryResolver",
    "class_component",
    "componentRef",
    "factory",
    "resolveComponentFactory",
    "viewContainerRef",
    "createComponent",
    "setComponentData",
    "ngOnChanges",
    "changes",
    "Object",
    "assign",
    "instance",
    "destroy",
    "HttpLoaderFactory",
    "httpClient",
    "TranslateHttpLoader",
    "encapsulation",
    "ViewEncapsulation",
    "None",
    "ComponentFactoryResolver",
    "ViewChild",
    "read",
    "ViewContainerRef",
    "ɵ0",
    "NgxAdminLteModule",
    "NgModule",
    "declarations",
    "imports",
    "BrowserModule",
    "HttpModule",
    "RouterModule",
    "ToasterModule",
    "HttpClientModule",
    "TranslateModule",
    "forRoot",
    "loader",
    "provide",
    "TranslateLoader",
    "useFactory",
    "deps",
    "HttpClient",
    "exports",
    "providers"
  ],
  "mappings": "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"
}
